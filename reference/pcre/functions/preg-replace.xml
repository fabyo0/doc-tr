<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 62126c55f1c6ed444043e7272c4f9e233818a44b Maintainer: nilgun Status: ready -->
<refentry xml:id="function.preg-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>Düzenli ifadeye göre dizgede değişiklik yapar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>array</type><type>null</type></type><methodname>preg_replace</methodname>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>şablon</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>yenisi</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>konu</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>sınır</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">değişiklik_sayısı</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <parameter>konu</parameter> dizgesini <parameter>şablon</parameter> ile
   eşleştirmeye çalışır ve bulduklarını <parameter>yenisi</parameter> ile
   değiştirir.
  </para>
  <para>
   Şablon yerine dizgenin kendisi eşleştirilmek istenirse, bu işlev yerine
   <function>str_replace</function> veya <function>str_ireplace</function>
   kullanılanılabilir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>şablon</parameter></term>
     <listitem>
      <para>
       Aranacak şablon. Tek bir dizge olabileceği gibi çok sayıda dizge içeren
       bir dizi de olabilir.
      </para>
      <para>
       Ayrıca, <link linkend="reference.pcre.pattern.modifiers">PCRE
       değiştircileri</link> de kullanılabilir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>yenisi</parameter></term>
     <listitem>
      <para>
       Yer değiştirme için kullanılacak dizge veya dizi. Eğer bir dizge
       belirtilmişse ve <parameter>şablon</parameter> bir dizi ise dizideki
       şablonlarla eşleşen tüm parçalara bu dizge yerleştirilir. Her iki
       bağımsız değişkende de dizi belirtilmişse her <parameter>şablon</parameter>
       elemanı için kendine karşılık gelen <parameter>yenisi</parameter>
       elemanı yerleştirilir. Eğer <parameter>yenisi</parameter> dizisinde
       daha az eleman varsa, karşılığı olmayan <parameter>şablon</parameter>
       elemanları için boş dizge kullanılır.
      </para>
      <para>
       <parameter>yenisi</parameter> bağımsız değişkeni
       <literal>\\<replaceable>n</replaceable></literal> veya
       <literal>$<replaceable>n</replaceable></literal>, biçiminde
       geriye gönderimler içerebilir. Genellikle ikinci biçem tarcih edilir.
       Böyle her geriye gönderim <replaceable>n</replaceable>'inci yaylı
       ayraçlı şablon grubuyla yakalanan metne karşılıktır.
       <replaceable>n</replaceable> 0 ve 99 dahil bu ikisi arasında herhangi
       bir sayı olabilir ve <literal>\0</literal> veya <literal>$0</literal>
       şablonun tamamıyla eşleşen dizgeye karşılık gelir. Açan yaylı ayraçlar
       ilki 1 olmak üzere soldan sağa doğru sayılarak bu sayılar yakalayan alt
       şablonların numaraları olurlar. <parameter>yenisi</parameter>
       bağımsız değişkeninde tersbölü kullanılacaksa bunların öncelenmesi gerekir
       Dizge içersinde yer alan tersbölülerin öncelenmesinin gerekebileceği
       unutulmamalıdır.
      </para>
      <para>
       Bir yer değiştirme şablonu ile çalışırken, bir geriye gönderimin hemen
       ardından başka bir sayının gelmesi durumunda geriye gönderim için
       alışılagelen <literal>\1</literal> gösterimini kullanamazsınız.
       Örneğin <literal>\11</literal> için işlev sizin <literal>\1</literal>
       geriye gönderiminden sonra <literal>1</literal> mi koyduğunuzu yoksa
       ardına hiçbir sayı konulmamış <literal>\11</literal> geriye
       gönderimini mi belirttiğinizi bilemeyeceğinden işlev hata verecektir.
       Böyle bir durumda çözüm <literal>${1}1</literal> kullanmaktır. Böylece
       <literal>$1</literal> geriye gönderimi ardından gelen
       <literal>1</literal> rakamından yalıtılmış olur.
      </para>
      <para>
       Artık kullanımı önerilmeyen <literal>e</literal> değiştiricisi
       kullanılırken, bu işlev geriye gönderimlerle değiştirilen dizgelerdeki
       bazı karakterleri (<literal>'</literal>, <literal>"</literal>,
       <literal>\</literal> ve NULL karakterlerini) tersbölü ile önceler.
       Bunun böyle yapılmasının sebebi, tek veya çift tırnak içine alınmış
       geriye gönderimlerin (<literal>'strlen(\'$1\')+strlen("$2")'</literal>
       gibi) sözdizimi hatası vermesine engel olmaktır. PHP'nin dizgeleri
       nasıl yorumladığını anlayabilmek için PHP'nin
       <link linkend="language.types.string">dizge sözdizimini</link> iyi
       bilmeniz gerekir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>konu</parameter></term>
     <listitem>
      <para>
       Şablonun aranacağı yer değiştirmeye konu dizge veya dizi.
      </para>
      <para>
       Eğer <parameter>konu</parameter> bir dizge ise arama ve değiştirme her
       eleman için ayrı ayrı yapılır ve sonuçlar da bir dizi olarak döndürülür.
      </para>
      <para>
       Eğer <parameter>konu</parameter> ilişkisel bir dizi ise dönen değerde
       anahtarlar korunacaktır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sınır</parameter></term>
     <listitem>
      <para>
       Her <parameter>konu</parameter> dizgesinde her şablon için olası azami
       yer değiştirme sayısı. <literal>-1</literal> öntanımlıdır (sınırsız).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değişiklik_sayısı</parameter></term>
     <listitem>
      <para>
       Belirtildiği takdirde yapılan yer değiştirmelerin sayısı bu
       bağımsız değişkene konur.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <parameter>konu</parameter> bağımsız değişkeni bir dizi ise
   <function>preg_replace</function> de bir dizi döndürür aksi takdirde bir
   dizge döner.
  </para>
  <para>
   Eşleşmeler bulunduğu takdirde yeni <parameter>konu</parameter> döner, aksi
   takdirde bir hata oluşmamışsa <parameter>konu</parameter> değiştirilmeden
   döndürülür; bir hata oluşmuşsa &null; döner.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   "\e" değiştiricisini kullanmak hataya yol açar ve bir
   <constant>E_WARNING</constant> çıktılanır.
  </para>
  &pcre.pattern.warning;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- Ardından bir sayı gelen geriye gönderim kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
$dizge = 'April 15, 2003';
$şablon = '/(\w+) (\d+), (\d+)/i';
$yenisi = '${1}1,$3';
echo preg_replace($şablon, $yenisi, $dizge);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- <function>preg_replace</function> ile indisli dizi kullanımı
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$dizge = 'The quick brown fox jumps over the lazy dog.';
$sablonlar = array();
$sablonlar[0] = '/quick/';
$sablonlar[1] = '/brown/';
$sablonlar[2] = '/fox/';
$yeniler = array();
$yeniler[2] = 'bear';
$yeniler[1] = 'black';
$yeniler[0] = 'slow';
echo preg_replace($sablonlar, $yeniler, $dizge);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The bear black slow jumps over the lazy dog.
]]>
    </screen>
    <para>
     Şablonlarla yenileri ksorting ile sıralarsak istediğimiz olur.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
ksort($sablonlar);
ksort($yeniler);
echo preg_replace($sablonlar, $yeniler, $dizge);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The slow black bear jumped over the lazy dog.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Çeşitli değerlerin değiştirilmesi</title>
    <programlisting role="php">
<![CDATA[
<?php
$sablonlar = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                   '/^\s*{(\w+)}\s*=/');
$yeniler = array ('\3/\4/\1\2', '$\1 =');
echo preg_replace($sablonlar, $yeniler, '{startDate} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Boşluk ayıklama</title>
    <para>
     Bu örnekte dizgedeki fazladan boşluklar temizlenmektedir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);
// 'foo o' basılacak
echo $str;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>- <parameter>değişiklik_sayısı</parameter> bağımsız değişkeninin kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
$sayı = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1 , $sayı), "\n";
echo $sayı; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <parameter>şablon</parameter> ve
    <parameter>yenisi</parameter> bağımsız değişkenlerinde dizi kullanıldığında
    anahtarlar dizide yer aldıkları sırayla işlenirler. Bunun sayısal indis
    sırasında olması <emphasis>şart değildir</emphasis>. Hangi
    <parameter>şablon</parameter>'un <parameter>yenisi</parameter>'nin ne
    olacağını indis sırasına göre belirlemek isterseniz
    <function>preg_replace</function> işlevini çağırmadan önce her iki diziyi
    de  <function>ksort</function> işlevinden geçirmelisiniz.
   </para>
  </note>
  <note>
   <para>
    <parameter>şablon</parameter> ve <parameter>yenisi</parameter>
    bağımsız değişkenlerinin ikisi de dizi ise eşleştirme kuralları sıralı uygulanır.
    Yani, ikinci <parameter>şablon</parameter>/<parameter>yenisi</parameter>
    çiftine uygulanacak dizge, birinci
    <parameter>şablon</parameter>/<parameter>yenisi</parameter> çiftinin
    sonucudur, özgün dizge değil. İki değeri takas etmek gibi paralel çalışan
    değiştirmeler yapılmak istenirse, bir <parameter>şablon</parameter>u bir
    ara yer tutucu ile değiştirip ardından daha sonraki bir çiftte bu aracı
    yer tutucu <parameter>yenisi</parameter> ile değiştirilebilir.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$p = array('/a/', '/b/', '/c/');
$r = array('b', 'c', 'd');
print_r(preg_replace($p, $r, 'a'));
// d basar
?>
]]>
    </programlisting>
   </informalexample>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">PCRE Şablonları</link></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_filter</function></member>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
    <member><function>preg_last_error</function></member>
    <member><function>str_replace</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
