<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d861a1bcea24f05e52e4938c1ecdf9d70326d7aa Maintainer: nilgun Status: ready -->
<chapter xml:id="pdo.connections" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Bağlantılar ve Bağlantı Yönetimi</title>
 <para>
  Bağlantılar temel PDO sınıfının örneklenmesiyle kurulur. Hangi sürücünün
  kullanılacağının bir önemi yoktur; daima PDO sınıf isminin kullanılması gerekir.
  Veritabanı kaynağı (diğer bir deyişle DSN) ve isteğe bağlı olarak kullanıcı
  ismi ve parolası belirtmek için kurucu kullanılabilir.
 </para>
 <para>
  <example>
   <title>- MySQL'e bağlanma</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Bir hata oluşursa bu bir <classname>PDOException</classname> istisnasına
  sebep olur. Hatayı ele almak için istisna yakalanabilir veya işlem
  <function>set_exception_handler</function> üzerinden ayarlanmış bir
  küresel hata işleme uygulamasına bırakılabilir.
 </para>
 <para>
  <example><title>- Bağlantı hatalarının ele alınışı</title>
   <programlisting role="php">
<![CDATA[
<?php
try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
} catch (PDOException $e) {
// örneğin zaman aşımını bekledikten sonra yediden bağlanmaya çalış
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <para>
   Tıpkı diğer herhangi bir <link linkend="language.exceptions">istisna</link>
   gibi, <classname>PDOException</classname> da bir &catch; deyimi aracılığıyla
   açıkça veya <function>set_exception_handler</function> aracılığıyla dolaylı
   olarak yakalanabilir. Aksi takdirde varsayılan olarak, yakalanmamış bir
   istisnayı <constant>E_FATAL_ERROR</constant> ölümcül hatasına dönüştürme
   davranışı gerçekleşir. Ölümcül hata, bağlantı ayrıntılarını sızdırabilecek
   bir geri izleme içerecektir. Bu nedenle, bir üretim sunucusunda &php.ini;
   <link linkend="ini.display-errors"><literal>display_errors</literal></link>
   seçeneğine <literal>0</literal> atanmalıdır.
  </para>
 </warning>
 <para>
  Veritabanı bağlantısının başarıyla kurulmasıyla betiğinize PDO sınıfının bir
  örneği döner. PDO nesnesinin ömrü boyunca bağlantı etkin kalır. Bağlantıyı
  kapatmak için, nesneye gönderimli herşeyin silindiğinden emin olarak nesneyi
  yok etmek gerekir; nesneyi tutan değişkene &null; atanarak bu yapılabilir.
  Bu yapılmazsa, PHP betiği sonlandığında nesne kendiliğinden yok edilir.
 </para>
 <note>
  <simpara>
   Bu PDO örneğine hala başka gönderimler varsa (örneğin bir PDOStatement
   örneğinden veya aynı PDO örneğine gönderimli diğer değişkenlerden),
   bunların da kaldırılması gerekir (örneğin, PDOStatement'a başvuran
   değişkene &null; atanarak).
  </simpara>
 </note>
 <para>
  <example>
   <title>- Bir bağlantının kapatılışı</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
// burada bağlantıyı kullanıyoruz

$sth = $dbh->query('SELECT * FROM foo');

// İşimiz bittiğine göre bağlantıyı kapatabiliriz.
$sth = null;
$dbh = null;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Çoğu HTTP uygulaması veritabanı sunucularına kalıcı bağlantılardan medet
  umar. Kalıcı bağlantılar betiğin işi bittiğinde kapatılmaz, önbelleğe alınıp
  aynı kimlik kanıtlarıyla bağlantı kurmak isteyen başka betiklerce
  kullanılır. Kalıcı bağlantı önbelleği, bir betiğin bir veritabanı ile her
  iletişime geçme isteğinde yeni bir bağlantı kurma maliyetini ortadan
  kaldırır ve uygulamanın daha hızlı çalışmasını sağlar.
 </para>
 <para>
  <example>
   <title>- Kalıcı bağlantılar</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass, array(
    PDO::ATTR_PERSISTENT => true
));
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <constant>PDO::ATTR_PERSISTENT</constant> seçeneğinin değeri, sayısal
  olmayan bir dizge olmadığı sürece &boolean;'a (kalıcı bağlantıları
  etkinleştir/devre dışı bırak) dönüştürülür, bu durumda çok sayıda kalıcı
  bağlantı havuzunun kullanımına izin verilir. Bu, farklı bağlantılar uyumsuz
  ayarlar kullanıyorsa, örneğin farklı
  <constant>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</constant> değerleri
  kullanılıyorsa yararlıdır.
 </para>
 <note>
  <para>
   Kalıcı bağlantı kullanmak için PDO kurucusuna aktarılan sürücü seçenekleri
   dizisinde <constant>PDO::ATTR_PERSISTENT</constant> sabitine &true;
   atanmalıdır. Nesne ilklendirildikten sonra bu özelliğin
   <methodname>PDO::setAttribute</methodname> ile etkin kılınması
   istenirse sürücü kalıcı bağlantıları kullanmayacaktır.
  </para>
 </note>
 <note>
  <para>
   PDO ODBC sürücüsü kullanılıyorsa ve ODBC kütüphaneleri ODBC Bağlantı
   Havuzlarını destekliyorsa (hem unixODBC hem de Windows bunu yapar;
   başkaları da olabilir) kalıcı PDO bağlantılarının kullanılması önerilmez;
   bağlantı önbelleklemesini ODBC Bağlantı Havuzlama katmanına bırakmak daha
   iyidir. ODBC Bağlantı Havuzu bağlantıyı süreçteki diğer modüllerle
   paylaşır; eğer PDO bağlantıyı önbelleklemeye çalışırsa bu bağlantı asla
   ODBC bağlantı havuzuna dönmez ve sonuçta diğer modüllere hizmet vermek için
   ek bağlantılar oluşur.
  </para>
 </note>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

