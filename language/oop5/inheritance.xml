<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f94d903985119d3ac00f4528551df947f57b667f Maintainer: nilgun Status: ready -->
 <sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
  <title>Nesnelerin Kalıtımı</title>
  <para>
   Kalıtım iyi kurgulanmış bir programlama prensibidir ve PHP bu prensibi kendi
   nesne modelinde kullanır. Bu prensip çoğu sınıf ve nesnenin bir diğeri ile
   ilişkisini düzenler.
  </para>
  <para>
   Örneğin, bir sınıf (<literal>extend</literal> ile) genişletildiğinde alt
   sınıf üst sınıftaki genel ve korunmuş yöntemlerin tümünü miras alır. Bir sınıf
   bu yöntemleri aynı isimdeki yöntemlerle geçersizleştirmedikçe bunlar özgün
   işlevselliklerini korur.
  </para>
  <para>
   Bu, işlevselliği tanımlamak ve soyutlamak için ve paylaşılan işlevselliğin
   tamamını yeni baştan gerçeklemeksizin benzer nesnelerde ek işlevsellikleri
   gerçeklemek için kullanışlıdır.
  </para>
  <para>
   Bir ebeveyn sınıfın private yöntemlerine bir çocuk sınıftan erişilemez.
   Sonuç olarak, normal miras alma kurallarına aldırmadan çocuk sınıfların bu
   private yöntemleri yeniden gerçeklemesi gerekebilir. PHP 8.0.0 öncesinde,
   private yöntemlere bunun yanında <literal>final</literal> ve
   <literal>static</literal> sınırlamaları da uygulanırdı. PHP 8.0.0 ve
   sonrasında zorunlu olan tek private yöntem kısıtlaması, <literal>private
   final</literal> kuruculardır, çünkü bu, yerleşik statik yöntemleri
   kullanırken kurucuyu "devre dışı" bırakmanın yaygın bir yoludur.
  </para>
  <para>
   Yöntemlerin, özelliklerin ve sabitlerin
   <link linkend="language.oop5.visibility">görünürlüğü</link> gevşetilebilir,
   örn. <literal>protected</literal> bir yöntem <literal>public</literal> olarak
   imlenebilir; ancak sınırlandırılamaz, örneğin bir <literal>public</literal>
   özellik, <literal>private</literal> olarak imlenebilir.  Görünürlüğü
   kısıtlanabilen kurucular istisnadır, örn. bir <literal>public</literal>
   kurucu, bir çocuk sınıfta <literal>private</literal> olarak imlenebilir.
  </para>
  <note>
   <para>
    Otomatik yükleme kullanılmadıkça, sınıflar kullanılmadan önce
    tanımlanmalıdır. Eğer bir sınıf diğerini genişletiyorsa ebeveyn sınıf çocuk
    sınıfın yapısı kurulmadan önce bildirilmiş olmalıdır. Bu kural diğer
    sınıfları ve arayüzleri miras alan tüm sınıflara uygulanır.
   </para>
  </note>

  <note>
   <para>
    Okunup yazılabilir bir özellik
    <link linkend="language.oop5.properties.readonly-properties">salt-okunur
    özellik</link> vb. ile geçersiz kılınamaz.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class A {
    public int $prop;
}
class B extends A {
    // Geçersiz: oku-yaz özellik salt-okunur yapılamaz
    public readonly int $prop;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <example>
   <title>Inheritance Example</title>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }

    public function printPHP()
    {
        echo 'PHP is great.' . PHP_EOL;
    }
}

class Bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new Foo();
$bar = new Bar();
$foo->printItem('baz'); // Çıktısı: 'Foo: baz'
$foo->printPHP();       // Çıktısı: 'PHP is great'
$bar->printItem('baz'); // Çıktısı: 'Bar: baz'
$bar->printPHP();       // Çıktısı: 'PHP is great'

?>
]]>
    </programlisting>
  </example>

  <sect2 xml:id="language.oop5.inheritance.internal-classes">
   <title>Dahili Sınıflar ve Dönüş Türü Uyumluluğu</title>

   <para>
    PHP 8.1 öncesinde, dahili sınıfların vaya yöntemlerin çoğunda dönüş türü
    bildirimi yoktu ve bunları genişletirken dönüş türüne izin veriliyordu.
   </para>

   <para>
    PHP 8.1.0 ve sonrasında, çoğu dahili yöntem dönüş türlerini "geçici
    olarak" bildirmeye başladı, bu durumda yöntemin dönüş türü, genişletilen
    ebeveyn ile uyumlu olmalıdır; aksi takdirde, bir kullanımdan kaldırma
    bildirimi çıktılanır. Açık bir dönüş türü bildiriminin olmayışı, ayrıca
    yapısal bir uyuşmazlık olarak kabul edilmekte ve dolayısıyla kullanımdan
    kaldırma bildirimiyle sonuçlanmaktadır.
   </para>

   <para>
    PHP'nin sürümler arası uyumluluk endişeleri nedeniyle geçersiz kılma
    yöntemi için dönüş türü bildirilemezse, kullanımdan kaldırma bildirimini
    sessizleştirmek için <classname>ReturnTypeWillChange</classname> özniteliği
    eklenebilir.
   </para>

   <example>
    <title>- Dönüş türünü bildirmeyen geçersiz kılma yöntemi</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDateTime extends DateTime
{
    public function modify(string $modifier) { return false; }
}

// "Deprecated: Return type of MyDateTime::modify(string $modifier) should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice" as of PHP 8.1.0
// Kullanımı önerilmiyor: MyDateTime::modify(string $modifier) için dönüş türü ya  DateTime::modify(string $modifier): DateTime|false ile uymlu olmalı ya da PHP 8.1.0 ve sonrasında uyarıyı susturmak için #[\ReturnTypeWillChange] özniteliği kullanılmış olmalıdır.
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>- Yanlış dönüş türü bildiren geçersiz kılma yöntemi</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDateTime extends DateTime
{
    public function modify(string $modifier): ?DateTime { return null; }
}

// "Deprecated: Return type of MyDateTime::modify(string $modifier): ?DateTime should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice" as of PHP 8.1.0
// Kullanımı önerilmiyor: MyDateTime::modify(string $modifier): ?DateTime için dönüş türü ya DateTime::modify(string $modifier): DateTime|false ile uymlu olmalı ya da PHP 8.1.0 ve sonrasında uyarıyı susturmak için #[\ReturnTypeWillChange] özniteliği kullanılmış olmalıdır.
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>- Yanlış dönüş türü bildiren ama kullanımı önerilmiyor uyarısı vermeyen geçersiz kılma yöntemi</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDateTime extends DateTime
{
    /**
     * @return DateTime|false
     */
    #[\ReturnTypeWillChange]
    public function modify(string $modifier) { return false; }
}

// Bir uyarı tetiklenmez
?>
]]>
    </programlisting>
   </example>

  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
