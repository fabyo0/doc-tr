<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: nilgun Status: ready -->
<sect1 xml:id="language.operators.increment">
 <title>Artırım ve Eksiltim İşleçleri</title>
 <titleabbrev>Artırım ve Eksiltim</titleabbrev>
 <para>
  PHP, önceden ve sonradan artırım ve eksiltim işleçlerini destekler.
  Bunlar değeri bir artıran veya eksilten tek terimli işleçlerdir.
 </para>
 <table>
  <title>Arttırım ve Eksiltim İşleçleri</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Örnek</entry>
     <entry>İsim</entry>
     <entry>Etkisi</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><userinput>++$a</userinput></entry>
     <entry>Önceden artırım</entry>
     <entry><varname>$a</varname> bir artırıldıktan sonra
     döndürülür.</entry>
    </row>
    <row>
     <entry><userinput>$a++</userinput></entry>
     <entry>Sonradan artırım</entry>
     <entry><varname>$a</varname> döndürüldükten sonra değeri bir
     artırılır.</entry>
    </row>
    <row>
     <entry><userinput>--$a</userinput></entry>
     <entry>Önceden eksiltim</entry>
     <entry><varname>$a</varname> bir eksiltildikten sonra
     döndürülür.</entry>
    </row>
    <row>
     <entry><userinput>$a--</userinput></entry>
     <entry>Sonradan eksiltim</entry>
     <entry><varname>$a</varname> döndürüldükten sonra değeri bir
     eksiltilir.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Basit bir betik örneği:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo "Sonradan artırım\n";
$a = 5;
var_dump($a++);
var_dump($a);

echo "Önceden artırım\n";
$a = 5;
var_dump(++$a);
var_dump($a);

echo "Sonradan eksiltim\n";
$a = 5;
var_dump($a--);
var_dump($a);

echo "Sonradan eksiltim\n";
$a = 5;
var_dump(--$a);
var_dump($a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Sonradan artırım:
int(5)
int(6)
Önceden artırım:
int(6)
int(6)
Sonradan eksiltim:
int(5)
int(4)
Sonradan eksiltim:
int(4)
int(4)
]]>
   </screen>
  </informalexample>
  <warning>
   <para>
    Artırım ve eksiltim işleçlerinin <type>bool</type> türündeki değerler
    üstünde etkisi yoktur. İleri sürümlerde değer örtük olarak
    <type>int</type> türüne dönüşüm uygulanacağından PHP 8.3.0 ve sonrasında
    bir <constant>E_WARNING</constant> çıktılanır.
   </para>
   <para>
    Eksiltim işlecinin <type>null</type> türünde değerler üzerinde etkisi
    yoktur. İleri sürümlerde değer örtük olarak <type>int</type> türüne
    dönüşüm uygulanacağından PHP 8.3.0 ve sonrasında bir
    <constant>E_WARNING</constant> çıktılanır.
   </para>
   <para>
    Değer <link linkend="language.types.numeric-strings">sayısal dizge</link>
    değilse eksiltim işleci etkisizdir. İleri sürümlerde
    <classname>TypeError</classname> oluşturacak olan bu durum PHP 8.3.0 ve
    sonrasında bir <constant>E_WARNING</constant> çıktılanmasına sebep olur.
   </para>
  </warning>
  <note>
   <para>
    Aşırı yüklemeyi destekleyen dahili nesnelerin toplama ve çıkarma
    işlemlerinde de artırım ve eksiltim yapılabilir. Böyle bir dahili
    nesneye örnek olarak <classname>GMP</classname> verilebilir.
   </para>
  </note>
 </para>

 <sect2 xml:id="language.operators.increment.string">
  <title>PERL dizge artırım özelliği</title>
  <warning>
   <simpara>
    Bu özelliğin PHP 8.3.0 ve sonrasında kullanımı bazı durumlarda
    önerilmemekte olup böyle bir durumun ortaya çıkmaması için bu özellik
    yerine <function>str_increment</function> işlevi kullanılmalıdır.
   </simpara>
  </warning>

  <para>
   Değer <link linkend="language.types.numeric-strings">sayısal dizge</link>
   değilse dizgeye artırım uygulanabilir. Bunun için dizgenin abecesaysal
   ASCII dizge olması gerekir. Harflerin bir sonraki harfe kadar artırılması
   durumunda, <literal>Z</literal> harfine ulaşıldığında artış soldaki değere
   taşınır. Örneğin, <code>$a = 'Z'; $a++;</code> için <varname>$a</varname>
   değeri <literal>'AA'</literal> olur.
  </para>
  <example>
   <title>- PERL dizge artırım örneği</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Abecesel dizgeler ==' . PHP_EOL;
$i = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Sayısal dizgeler farklı davranır
echo '== Sayısal dizgeler ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
== Abecesel dizgeler ==
X
Y
Z
AA
AB
AC
== Sayısal dizgeler ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>

  <warning>
   <para>
    Abecesayısal dizge, <link linkend="language.types.numeric-strings">sayısal
    dizge</link> olarak yorumlanırsa değer <type>int</type> veya
    <type>float</type> türüne dönüştürülür. Bu özellikle üstel gösterimle
    yazılmış gerçel bir sayı gibi görünen dizgelerde ortaya çıkar.
    <function>str_increment</function> işlevi böyle örtük tür dönüşümlerinden
    etkilenmez.
   </para>
   <example>
    <title>- float türüne dönüştürülen abecesayısal dizge</title>
    <programlisting role="php">
<![CDATA[
<?php
$s = "5d9";
var_dump(++$s);
var_dump(++$s);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "5e0"
float(6)
]]>
    </screen>
    <para>
     Bunun nedeni, <literal>"5e0"</literal> değerinin <type>float</type>
     olarak yorumlanması ve artırılmadan önce <literal>5,0</literal> değerine
     dönüştürülmesidir.
    </para>
   </example>
  </warning>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
